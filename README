This directory contains  the PSBLAS library, version 3.0-pre-release.

WARNING: This is higly experimental, unstable, and almost undocumented.  
	 Do not count on anything to remain unchanged by the time 3.0
	 really comes out. 

This version requires a working Fortran 2003 compiler; we do not use
all of the language features (specifically, so far we did not employ
FINAL subroutines), but the features we use were sufficient in
identifying bugs in ALL compilers we tried (all the bugs have been
reported and mostly fixed by the respective vendors). 

Notes: This code is confirmed to work with NAGware 5.2 on an i686 and
       XLF 13.1 on a POWER6.  
       It does NOT work with GNU Fortran 4.5; it is one of the
       testbeds for GNU Fortran 4.6.
       GNU 4.6.0: as of Sep. 2, 2010 it works; note however that the 
       configure script will define the HAVE_MOLD compilation flag,
       and this does not work properly until the fix for PR45451 is
       available. Until then, you'll need to take out  HAVE_MOLD by
       hand in Make.inc. 
        
       If you find it working with other compilers, please let us
       know. 

       The "undocumented" in the warning above refers to the
       internals; the new internals have been completely overhauled,
       and in many cases rewritten; they are supposed to enable much
       better interfacing with user-defined storage formats. If the
       user is only interested in the predefined formats, then the
       user's guide should be sufficient; what is lacking is
       documentation on how to add to the library. This will come. 


 
Version 1.0 of the library was described in:
S. Filippone, M. Colajanni
PSBLAS: A library for parallel linear algebra computation on sparse matrices
ACM Trans. on Math. Software, 26(4), Dec. 2000, pp. 527-550.

PLATFORMS: 

OBSOLETE!!!!!!!! see above ... 
--The compilation process relies on the choice of an appropriate
--Make.inc file; we have tested with AIX XLF, Intel ifort/Linux,  Nag
--f95/Linux, GNU Fortran/Linux, Sun Forte 6.2. If you succeed in
--compiling with  other compiler/operating systems please let us know. 


LINUX:



UTILITIES
The test/util directory contains some utilities to convert to/from
Harwell-Boeing and MatrixMarket file formats. 


DOCUMENTATION

See docs/psblas-2.3.pdf; an HTML version of the same document is
available in docs/html. 
Please consult the sample programs, especially test/pargen/ppde.f90. 


OTHER SOFTWARE CREDITS 

We include our modified implementation of some of the Sparker (serial
sparse BLAS)  material,  e.g. Jagged diagonal, plus a number of
extensions of our own design. The original file spblas.f can be
downloaded from matisa.cc.rl.ac.uk; of course any bugs in our
implementation are our own to fix.  The main reference for the serial
sparse BLAS is: 
Duff, I., Marrone, M., Radicati, G., and Vittoli, C.
Level 3 basic linear algebra subprograms for sparse matrices: a user 
level interface
ACM Trans. Math. Softw., 23(3), 379-401, 1997.

INSTALLING

To compile and run our software you will need the following
prerequisites (see also SERIAL below):

1. A working version of MPI

2. A version of the BLAS; if you don't have a specific version for
   your platform you may try ATLAS available from
   http://math-atlas.sourceforge.net/ 

3. We have had good results with  the METIS library, from 
   http://www-users.cs.umn.edu/~karypis/metis/metis/main.html 
   This is optional; it is  used in the util and test/fileread
   directories but only if you define the HAVE_METIS directive.

The configure script will generate a Make.inc file suitable for
building the library.  
The script is capable of recognizing the needed libraries with their
default names; if they are in unusual places consider adding the paths
with --with-libs, or explicitly specifying the names in --with-blas, etc. 
Please note that a common way for the configure script to fail is to
specify inconsistent MPI vs. plain compilers, either directly or
indirectly via environment variables; e.g. specifying the Intel
compiler with FC=ifort while at the same time having an  MPIFC=mpif90
which points to GNU Fortran. 
The best way to avoid this situation is (in our opinion) to use the
environment modules package (see http://modules.sourceforge.net/), and
load the relevant variables with (e.g.)  
module load gnu42 mpich 
This will delegate to the modules setup to make sure that the version
of mpich in use is the one compiled with the gnu42 compilers. 
After the configure script has completed you can always tweak the
Make.inc  file yourself. 

After you have Make.inc fixed,  run 
 make 
to  compile the library; go to the test directory and its
subdirectories to get test programs done.   
If you specify --prefix=/path you can do make install and the
libraries will be installed under /path/lib, while the module files
will be installed under /path/include.


KNOWN ISSUES.

An annoying problem exists with some versions of MPI: if the configure
script sets -DMPI_MOD the MPI call interfaces will be resolved by
using the MPI Fortran module. 
However usage of the  module may cause compilation to fail when
coupled with the debugging option -g, because the compiler complains
that it cannot find a matching interface for some of the
communication routines.
The solution: either take out the -g option, or, if you really need to
debug, edit Make.inc to force -DMPI_H in place of -DMPI_MOD. 


TODO:
Fix all reamining bugs. Bugs? We dont' have any ! ;-)


The PSBLAS team. 

RELATED SOFTWARE

If you are looking for more sophisticated preconditioners, you may be
interested in the package  MLD2P4 from http://www.mld2p4.it 



Contact: Salvatore Filippone     salvatore.filippone@uniroma2.it

Credits for version 2.2:
Michele Martone contributed the initial version of the configure
machinery.  

Credits for version 2.0:
Salvatore  Filippone
Alfredo    Buttari


Credits for version 1.0:

Salvatore  Filippone
Michele    Colajanni
Fabio      Cerioni
Stefano    Maiolatesi
Dario      Pascucci



